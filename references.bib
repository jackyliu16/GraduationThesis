@book{noauthor_ieee_2016,
	address = {New York},
	title = {{IEEE} standard for {Ethernet}},
	isbn = {978-1-5044-0078-7},
	abstract = {Ethernet local area network operation is specified for selected speeds of operation from 1 Mb/s to 100 Gb/s using a common media access control (MAC) specification and management information base (MIB). The Carrier Sense Multiple Access with Collision Detection (CSMA/CD) MAC protocol specifies shared medium (half duplex) operation, as well as full duplex operation. Speed specific Media Independent Interfaces (MIIs) allow use of selected Physical Layer devices (PHY) for operation over coaxial, twisted pair or fiber optic cables, or electrical backplanes. System considerations for multisegment shared access networks describe the use of Repeaterswhich are defined for operational speeds up to 1000 Mb/s. Local Area Network (LAN) operation is supported at all speeds. Other specified capabilities include: various PHY types for access networks, PHYs suitable for metropolitan area network applications, and the provision of power over selected twisted pair PHY types},
	language = {en},
	publisher = {IEEE},
	year = {2016},
	note = {OCLC: 1017937152},
	file = {2016 - IEEE standard for Ethernet.pdf:C\:\\Users\\jacky\\Zotero\\storage\\DPT9HFPD\\2016 - IEEE standard for Ethernet.pdf:application/pdf},
}

@misc{noauthor_fpm383c_nodate,
	title = {{FPM383C}},
	file = {指纹上位机使用指南.pdf:C\:\\Users\\jacky\\Zotero\\storage\\8C63VWI2\\指纹上位机使用指南.pdf:application/pdf;FPM383C模组通信协议_V1.2.pdf:C\:\\Users\\jacky\\Zotero\\storage\\VEBVPAUK\\FPM383C模组通信协议_V1.2.pdf:application/pdf;FPM383C用户通信协议手册V1.2（建议使用）.pdf:C\:\\Users\\jacky\\Zotero\\storage\\WUJX43I3\\FPM383C用户通信协议手册V1.2（建议使用）.pdf:application/pdf;HLK-FPM383C 模组规格书 V1.0.1.pdf:C\:\\Users\\jacky\\Zotero\\storage\\WX7DT37Z\\HLK-FPM383C 模组规格书 V1.0.1.pdf:application/pdf;HLK-FPM383F模组规格书V1.0.2.pdf:C\:\\Users\\jacky\\Zotero\\storage\\K7KLIZZJ\\HLK-FPM383F模组规格书V1.0.2.pdf:application/pdf;HLK-FPM383F模组规格书V1.0.2.pdf:C\:\\Users\\jacky\\Zotero\\storage\\6KA6T32Q\\HLK-FPM383F模组规格书V1.0.2.pdf:application/pdf;HLK-ZV20底板使用说明V1.0.pdf:C\:\\Users\\jacky\\Zotero\\storage\\HZHXBSHG\\HLK-ZV20底板使用说明V1.0.pdf:application/pdf},
}

@misc{noauthor_ieee_nodate,
	title = {{IEEE} 802.3},
	file = {802.3-2015_SECTION1.pdf:C\:\\Users\\jacky\\Zotero\\storage\\UEQSYV6L\\802.3-2015_SECTION1.pdf:application/pdf;802.3-2015_SECTION2.pdf:C\:\\Users\\jacky\\Zotero\\storage\\2HSIWHRT\\802.3-2015_SECTION2.pdf:application/pdf;802.3-2015_SECTION3.pdf:C\:\\Users\\jacky\\Zotero\\storage\\WLEUUGFX\\802.3-2015_SECTION3.pdf:application/pdf;802.3-2015_SECTION4.pdf:C\:\\Users\\jacky\\Zotero\\storage\\WU2LB95M\\802.3-2015_SECTION4.pdf:application/pdf;802.3-2015_SECTION5.pdf:C\:\\Users\\jacky\\Zotero\\storage\\UUJNYVDL\\802.3-2015_SECTION5.pdf:application/pdf;802.3-2015_SECTION6.pdf:C\:\\Users\\jacky\\Zotero\\storage\\M92FJXHK\\802.3-2015_SECTION6.pdf:application/pdf},
}

@article{singh_microkernel_nodate,
	title = {Microkernel operating systems compared to monolithic operating systems: a review on functional safety},
	abstract = {With the trend of digitalization, intelligence, and networking sweeping the world, functional safety and cyber security are increasingly intertwined and overlapped, evolving into the issue of generalized operational safety. This research paper investigates the influence of microkernel and monolithic operating system architectures on functional safety within safetycritical systems. By examining their impact on fault containment, modularity, isolation, and dynamic reconfiguration, we explore how these architectures shape the development and maintenance of secure and dependable safety-critical systems. The DHR architecture is a mature and comprehensive solution, and it is necessary to implement an OS-level DHR architecture, for which the multi-kernel operating system is a suitable carrier. This study examines the role of microkernel operating systems in enhancing functional safety. By comparing microkernel systems with traditional monolithic counterparts, the research assesses their effectiveness in supporting safety-critical applications. Developers and system architects’ perspectives provide insights into how microkernel architectures improve functional safety measures. The findings contribute to understanding how microkernel OS solutions can enhance safety in critical environments.},
	language = {en},
	author = {Singh, Samesun and Torri, Stephen A},
	file = {Singh 和 Torri - Microkernel operating systems compared to monolith.pdf:C\:\\Users\\jacky\\Zotero\\storage\\FJZZ9NIM\\Singh 和 Torri - Microkernel operating systems compared to monolith.pdf:application/pdf},
}

@article{heiser_l4_2016,
	title = {L4 {Microkernels}: {The} {Lessons} from 20 {Years} of {Research} and {Deployment}},
	volume = {34},
	issn = {0734-2071, 1557-7333},
	shorttitle = {L4 {Microkernels}},
	url = {https://dl.acm.org/doi/10.1145/2893177},
	doi = {10.1145/2893177},
	abstract = {The L4 microkernel has undergone 20 years of use and evolution. It has an active user and developer community, and there are commercial versions that are deployed on a large scale and in safety-critical systems. In this article we examine the lessons learnt in those 20 years about microkernel design and implementation. We revisit the L4 design articles and examine the evolution of design and implementation from the original L4 to the latest generation of L4 kernels. We specifically look at seL4, which has pushed the L4 model furthest and was the first OS kernel to undergo a complete formal verification of its implementation as well as a sound analysis of worst-case execution times. We demonstrate that while much has changed, the fundamental principles of minimality, generality, and high inter-process communication (IPC) performance remain the main drivers of design and implementation decisions.},
	language = {en},
	number = {1},
	urldate = {2024-04-11},
	journal = {ACM Transactions on Computer Systems},
	author = {Heiser, Gernot and Elphinstone, Kevin},
	month = apr,
	year = {2016},
	pages = {1--29},
	file = {Heiser 和 Elphinstone - 2016 - L4 Microkernels The Lessons from 20 Years of Rese.pdf:C\:\\Users\\jacky\\Zotero\\storage\\T6VIRF83\\Heiser 和 Elphinstone - 2016 - L4 Microkernels The Lessons from 20 Years of Rese.pdf:application/pdf},
}

@phdthesis{__2017,
	type = {硕士},
	title = {指纹考勤系统设计与实现},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201701&filename=1017014717.nh&v=},
	abstract = {企业随着计算机网络技术以及生物特征识别技术的飞速发展,开始在各个地区逐步设立分支机构,为满足企业市场化功能扩展需求,人事管理中的员工考勤管理需要实现智能化。传统的考勤系统不能确保唯一性,无错性,并且大都存在地域局限性,当其涉及到不同地域时无法正常工作,为了能够满足集团公司考勤要求,现提出以单片机为核心的一种指纹考勤系统。该系统通过使用指纹识别技术,在考勤过程中对员工进行身份识别,同时,利用计算机网络技术将考勤数据上传到总部指纹考勤系统服务器,使处在不同地域的各个分支机构互联起来,实现实时接收数据,记录考勤人员身份及时间,读取考勤信息并进行处理。实现人员考勤的有效管理。指纹考勤系统使员工的出勤情况得到了快捷、高效地记录,提升企业效率,节省企事业单位管理成本,为企事业提供多元化的管理平台,整个系统将软件、硬件、网络、生物特征识别等技术进行了系统整合。单片机指纹考勤系统的测试结果表明,单片机指纹考勤系统抗干扰能力强、成本低、操作简单、工作良好。},
	language = {中文;},
	school = {南昌大学},
	author = {贺, 钱琛},
	collaborator = {李, 迟生 and 傅, 学东},
	year = {2017},
	note = {4 citations(CNKI)[2023-10-8]},
	keywords = {单片机, 生物识别 single-chip, 指纹考勤系统, Biometric identification, Fingerprint attendance system},
	file = {贺_2017_指纹考勤系统设计与实现.pdf:C\:\\Users\\jacky\\Zotero\\storage\\89N99TZ3\\贺_2017_指纹考勤系统设计与实现.pdf:application/pdf},
}

@phdthesis{__2017-1,
	type = {硕士},
	title = {校园指纹考勤系统的设计及实现},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201801&filename=1017726285.nh&v=},
	abstract = {目前,学校的考勤方式还停留在纸质人工点名阶段,这样存在很多弊端,一来不能准确的反应出勤情况,二来浪费了太多的精力而不能更多地专注于提升自己的专业水平。为了更有利于唐山师范学院滦州分校创建良好的校园风气,开发智能考勤系统,变得迫在眉睫。推广实施计算机网络技术与指纹技术相结合的考勤模式,实现科学考勤。首先,进行对学校指纹考勤系统的可行性分析与需求分析。在总结唐山师范学院滦州分校考勤管理应用的实际需求的基础上,分析考勤系统的运用流程,提高系统的功能性和可行性,可以灵活而准确的记录学生和教职工的出勤情况,使告假能够在网上实现。一旦考勤系统联网以后,学生家长们就可以在网络上了解到孩子在学校的情况了。指纹考勤拥有稳定性、准确性、指纹比对速率快且操作又简易,有广阔的产业化前景。其次,进行对考勤系统的设计。在对考勤系统的需求分析及可行性分析后,对系统总体架构与数据模型进行设计。划分出出勤点名系统、考勤功能系统、Web出勤查询系统、指纹机网络监控软件系统和服务器自动考勤系统五个模块。对数据库进行设计,并归纳出数据库管理系统属性表。系统的设计应当具有校园的特点,对整个考勤管理体系的设计目的与实现和过程来进行详细的说明。本系统采取微软的Visual C++技术进行编程。以管理监控(C/S模式)与考勤查询(B/S模式)相结合,大大避免了C/S模式和B/S模式在灵活性和响应速度等方面的缺陷。由考勤机提供出勤的原始记录,并以固定的模式在数据库中保存。一个好的考勤管理系统能够对各种出勤情况进行计算并输出正确完整的结果。从而使管理员能够不需任何多余操作就可直接登录考勤系统的主界面。最后,对此考勤系统,进行功能测试并以自动考勤管理、班级考勤、显示考勤时间安排、出勤查询等功能为例,编制测试界面,检验各模块和整个系统的运行是否正常。},
	language = {中文;},
	school = {燕山大学},
	author = {周, 天洁},
	collaborator = {金, 顺福 and 李, 永强},
	year = {2017},
	note = {6 citations(CNKI)[2023-10-8]},
	keywords = {指纹考勤系统, B/S development model, B/S开发模式, C/S development model, C/S开发模式, SQL Server 2008, SQL Server 2008 fingerprint attendance system, Visual C++},
	file = {周_2017_校园指纹考勤系统的设计及实现.pdf:C\:\\Users\\jacky\\Zotero\\storage\\U98N9FI5\\周_2017_校园指纹考勤系统的设计及实现.pdf:application/pdf},
}

@phdthesis{__2017-2,
	type = {硕士},
	title = {基于指纹识别的学生考勤系统的设计与实现},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202001&filename=1020018593.nh&v=},
	abstract = {随着近年来高等院校的大规模扩招,广大高等院校的学生规模越来越大,这对高校的教学管理提出了严峻的挑战。积极主动的对在校学生进行有效的考勤管理工作,不仅可以端正学生的学习态度,规范学生的学习状态,同时也有利于学校安全防范工作的开展。而当下的学校考勤制度,还是延续老师上课点名的考勤方式,这种考勤方式在一定程度上起到了积极的作用,但是漏洞也显而易见:课前点名导致学生无法及时出勤、课中点名导致占用上课时间、课后点名影响学生课间休息,同时还可能存在冒名顶戴的情况。随着生物科技的发展,指纹考勤则充分的避免了上述问题,首先指纹具有唯一性、可靠性和准确性。其次,考勤速度快,学生进入教室前按一下指纹即可,最后,由于考勤机都是由计算机后台记录,所以这种方式易于储存,方便统计。针对上述的情况,本文的研究内容就是设计和研发一套结合生物识别技术-指纹识别技术的高校指纹考勤系统。主要内容如下:1、指纹技术的应用与发展以及考勤系统的发展概况2、学生指纹考勤管理系统的业务流程梳理以及功能需求方面的分析。3、基于需求分析进行指纹考勤系统的架构分析与设计4、指纹考勤管理系统的实现与测试其中第2-4部分是本文的主要研究内容,主要通过可行性分析确定系统的可行性,通过功能需求分析、用例分析确定系统的基本架构;然后通过架构设计、总体设计、数据库设计三个层次的设计确定系统的详细结构;再以C\#为前台开发工具,以Sql Server为后台数据库完成指纹考勤管理系统的开发过程,最后对系统进行测试和总结。本文重点是指纹考勤管理系统的设计与开发过程,难点在于系统的整体架构设计以及后期的数据分析和整理。},
	language = {中文;},
	school = {南京理工大学},
	author = {宋, 荣华},
	collaborator = {符, 意德},
	year = {2017},
	note = {4 citations(CNKI)[2023-10-8]},
	keywords = {考勤系统 Ciological Recognition Technology, 生物识别技术, 学生考勤, Attendance System, Student Attendance},
	file = {宋_2017_基于指纹识别的学生考勤系统的设计与实现.pdf:C\:\\Users\\jacky\\Zotero\\storage\\VK2LY7P3\\宋_2017_基于指纹识别的学生考勤系统的设计与实现.pdf:application/pdf},
}

@article{boos_theseus_nodate,
	title = {Theseus: an {Experiment} in {Operating} {System} {Structure} and {State} {Management}},
	doi = {10.5555/3488766.3488767},
	abstract = {This paper describes an operating system (OS) called Theseus. Theseus is the result of multi-year experimentation to redesign and improve OS modularity by reducing the states one component holds for another, and to leverage a safe programming language, namely Rust, to shift as many OS responsibilities as possible to the compiler.

Theseus embodies two primary contributions. First, an OS structure in which many tiny components with clearly-defined, runtime-persistent bounds interact without holding states for each other. Second, an intralingual approach that realizes the OS itself using language-level mechanisms such that the compiler can enforce invariants about OS semantics.

Theseus's structure, intralingual design, and state management realize live evolution and fault recovery for core OS components in ways beyond that of existing works.},
	language = {en},
	number = {2020-11-04},
	journal = {OSDI'20: Proceedings of the 14th USENIX Conference on Operating Systems Design and Implementation},
	author = {Boos, Kevin and Liyanage, Namitha and Ijaz, Ramla and Zhong, Lin},
	keywords = {⛔ No DOI found},
	pages = {Pages 1--19},
	file = {Boos 等 - Theseus an Experiment in Operating System Structu.pdf:C\:\\Users\\jacky\\Zotero\\storage\\2DCJKEWY\\Boos 等 - Theseus an Experiment in Operating System Structu.pdf:application/pdf},
}

@incollection{lankes_rustyhermit_2020,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{RustyHermit}: {A} {Scalable}, {Rust}-{Based} {Virtual} {Execution} {Environment}},
	volume = {12321},
	isbn = {978-3-030-59850-1 978-3-030-59851-8},
	shorttitle = {High {Performance} {Computing}},
	url = {https://link.springer.com/10.1007/978-3-030-59851-8},
	abstract = {Abstract. System-level development has been dominated by programming languages such as C/C++ for decades. These languages are inherently unsafe, error-prone, and a major reason for vulnerabilities. High-level programming languages with a secure memory model and strong type system are able to improve the quality of the system software. This paper explores the programming language Rust for development of a scalable, virtual execution environment and presents the integration of a Rustbased IP stack into RustyHermit. RustyHermit is part of the standard Rust toolchain and common Rust applications are able to build on top of RustyHermit.},
	language = {en},
	urldate = {2023-10-08},
	booktitle = {High {Performance} {Computing}: {ISC} {High} {Performance} 2020 {International} {Workshops}, {Frankfurt}, {Germany}, {June} 21–25, 2020, {Revised} {Selected} {Papers}},
	publisher = {Springer International Publishing},
	author = {Lankes, Stefan and Klimt, Jonathan and Breitbart, Jens and Pickartz, Simon},
	year = {2020},
	doi = {10.1007/978-3-030-59851-8},
	file = {(Lecture Notes in Computer Science 12321) Heike Jagode, Hartwig Anzt, Guido Juckeland, Hatem Ltaief - High Performance Computing_ ISC High Performance 2020 International Workshops, Frankfurt, Germany,.pdf:C\:\\Users\\jacky\\Downloads\\(Lecture Notes in Computer Science 12321) Heike Jagode, Hartwig Anzt, Guido Juckeland, Hatem Ltaief - High Performance Computing_ ISC High Performance 2020 International Workshops, Frankfurt, Germany,.pdf:application/pdf},
}

@book{jagode_high_2020,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {High {Performance} {Computing}: {ISC} {High} {Performance} 2020 {International} {Workshops}, {Frankfurt}, {Germany}, {June} 21–25, 2020, {Revised} {Selected} {Papers}},
	volume = {12321},
	isbn = {978-3-030-59850-1 978-3-030-59851-8},
	shorttitle = {High {Performance} {Computing}},
	url = {https://link.springer.com/10.1007/978-3-030-59851-8},
	language = {en},
	urldate = {2023-10-08},
	publisher = {Springer International Publishing},
	editor = {Jagode, Heike and Anzt, Hartwig and Juckeland, Guido and Ltaief, Hatem},
	year = {2020},
	doi = {10.1007/978-3-030-59851-8},
	file = {Jagode 等 - 2020 - High Performance Computing ISC High Performance 2.pdf:C\:\\Users\\jacky\\Zotero\\storage\\BUD2PUYX\\Jagode 等 - 2020 - High Performance Computing ISC High Performance 2.pdf:application/pdf},
}

@inproceedings{lankes_exploring_2019,
	address = {Huntsville ON Canada},
	title = {Exploring {Rust} for {Unikernel} {Development}},
	isbn = {978-1-4503-7017-2},
	url = {https://dl.acm.org/doi/10.1145/3365137.3365395},
	doi = {10.1145/3365137.3365395},
	abstract = {System-level development has been dominated by programming languages like C / C++ for decades. These languages are inherently unsafe, error-prone, and a major reason for vulnerabilities. High-level programming languages with a secure memory model and strong type system are able to improve the quality of the system software. In this paper, we explore the programming language Rust for kernel development and present RustyHermit, which is a unikernel completely written in Rust without any C / C++. We show that the support for RustyHermit can be transparently integratable in the Rust toolchain and common Rust applications are build-able on top of RustyHermit. Previously, we developed the C-based unikernel HermitCore with a similar design to RustyHermit and we are able to compare both kernels. We show that the performance of both kernels is similar and only {\textasciitilde}3.27 \% of RustyHermit relies on unsafe code, that cannot be checked by the compiler in detail.},
	language = {en},
	urldate = {2023-10-08},
	booktitle = {Proceedings of the 10th {Workshop} on {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Lankes, Stefan and Breitbart, Jens and Pickartz, Simon},
	month = oct,
	year = {2019},
	pages = {8--15},
	file = {Lankes et al_2019_Exploring Rust for Unikernel Development.pdf:C\:\\Users\\jacky\\Zotero\\storage\\GXHFEBVI\\Lankes et al_2019_Exploring Rust for Unikernel Development.pdf:application/pdf},
}


@article{kuenzer_unikraft_2021,
	title = {Unikraft: {Fast}, {Specialized} {Unikernels} the {Easy} {Way}},
	doi = {10.1145/3447786.3456248},
	abstract = {Unikernels are famous for providing excellent performance in terms of boot times, throughput and memory consumption, to name a few metrics. However, they are infamous for making it hard and extremely time consuming to extract such performance, and for needing significant engineering effort in order to port applications to them. We introduce Unikraft, a novel micro-library OS that (1) fully modularizes OS primitives so that it is easy to customize the unikernel and include only relevant components and (2) exposes a set of composable, performance-oriented APIs in order to make it easy for developers to obtain high performance.},
	language = {en},
	author = {Kuenzer, Simon and Bădoiu, Vlad-Andrei and Lefeuvre, Hugo and Santhanam, Sharan and Jung, Alexander and Gain, Gaulthier and Soldani, Cyril and Lupu, Costin and Teodorescu, Ștefan and Răducanu, Costi and Banu, Cristian and Mathy, Laurent and Deaconescu, Răzvan and Raiciu, Costin and Huici, Felipe},
	year = {2021},
	file = {Kuenzer 等 - 2021 - Unikraft Fast, Specialized Unikernels the Easy Wa.pdf:C\:\\Users\\jacky\\Zotero\\storage\\9TJQIIGS\\Kuenzer 等 - 2021 - Unikraft Fast, Specialized Unikernels the Easy Wa.pdf:application/pdf},
}

@article{porter_rethinking_nodate,
	title = {Rethinking the library {OS} from the top down},
	doi = {10.1145/1961296.1950399},
	abstract = {This paper revisits an old approach to operating system construction, the library OS, in a new context. The idea of the library OS is that the personality of the OS on which an application depends runs in the address space of the application. A small, fixed set of abstractions connects the library OS to the host OS kernel, offering the promise of better system security and more rapid independent evolution of OS components.},
	language = {en},
	author = {Porter, Donald E and Boyd-Wickizer, Silas and Howell, Jon and Olinsky, Reuben and Hunt, Galen C},
	keywords = {⚠️ Invalid DOI},
	file = {Porter 等 - Rethinking the library OS from the top down.pdf:C\:\\Users\\jacky\\Zotero\\storage\\QIQHXASL\\Porter 等 - Rethinking the library OS from the top down.pdf:application/pdf},
}

@article{madhavapeddy_unikernels_nodate,
	title = {Unikernels: library operating systems for the cloud},
	doi = {https://doi.org/10.1145/2490301.2451167},
	abstract = {We present unikernels, a new approach to deploying cloud services via applications written in high-level source code. Unikernels are single-purpose appliances that are compile-time specialised into standalone kernels, and sealed against modiﬁcation when deployed to a cloud platform. In return they offer signiﬁcant reduction in image sizes, improved efﬁciency and security, and should reduce operational costs. Our Mirage prototype compiles OCaml code into unikernels that run on commodity clouds and offer an order of magnitude reduction in code size without signiﬁcant performance penalty. The architecture combines static type-safety with a single address-space layout that can be made immutable via a hypervisor extension. Mirage contributes a suite of type-safe protocol libraries, and our results demonstrate that the hypervisor is a platform that overcomes the hardware compatibility issues that have made past library operating systems impractical to deploy in the real-world.},
	language = {en},
	author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
	keywords = {⚠️ Invalid DOI, 引用},
	file = {Madhavapeddy 等 - Unikernels library operating systems for the clou.pdf:C\:\\Users\\jacky\\Zotero\\storage\\6MK5T6HT\\Madhavapeddy 等 - Unikernels library operating systems for the clou.pdf:application/pdf},
}

@book{russell_unikernels_2016,
	title = {Unikernels: {Beyond} {Containers} to the {Next} {Generation} of {Cloud}},
	isbn = {978-1-4919-5924-4},
	publisher = {O'Reilly Media, Inc.},
	author = {Russell, Pavlicek},
	month = oct,
	year = {2016},
	file = {2016-09-28-unikernels-beyond-containers.pdf:C\:\\Users\\jacky\\Zotero\\storage\\KWNUN2IK\\2016-09-28-unikernels-beyond-containers.pdf:application/pdf},
}

@misc{pesse__2015,
	type = {Github},
	title = {计算机系统原理讲义},
	url = {https://unitial.gitbooks.io/csp/content/index.html},
	abstract = {本书是上海交通大学开设“计算机系统原理”课程的配套讲义。},
	language = {中文},
	urldate = {2023-12-06},
	journal = {计算机系统原理（课程讲义）},
	author = {Pessé, Samy and Xia, Yubin and Qiu, Liang},
	month = jul,
	year = {2015},
	keywords = {引用},
}

@article{anderson_scheduler_nodate,
	title = {Scheduler {Activations}: {Effective} {Kernel} {Support} for the {User}-{Level} {Management} of {Parallelism}},
	volume = {10},
	doi = {10.1145/146941.146944},
	language = {en},
	number = {1},
	journal = {ACM Transactions on Computer Systems},
	author = {Anderson, Thomas E and Bershad, Brian N and Levy, Henry M},
	keywords = {引用},
	file = {Anderson 等 - Scheduler Activations Effective Kernel Support fo.pdf:C\:\\Users\\jacky\\Zotero\\storage\\9VD9AKLY\\Anderson 等 - Scheduler Activations Effective Kernel Support fo.pdf:application/pdf},
}

@article{olivier_syscall-level_2021,
	title = {A {Syscall}-{Level} {Binary}-{Compatible} {Unikernel}},
	issn = {0018-9340, 1557-9956, 2326-3814},
	url = {https://ieeexplore.ieee.org/document/9591434/},
	doi = {10.1109/TC.2021.3122896},
	abstract = {Unikernels are minimal single-purpose virtual machines. They are highly popular in the research domain due to the beneﬁts they provide. A barrier to their widespread adoption is the difﬁculty/impossibility to port existing applications to current unikernels. HermiTux is the ﬁrst unikernel providing system call-level binary compatibility with Linux applications. It is composed of a hypervisor and a lightweight kernel layer emulating the load- and runtime Linux ABI. HermiTux relieves application developers from the burden of porting software, while providing unikernel beneﬁts such as security through hardware-assisted virtualized isolation, swift boot time, and low disk/memory footprint. Fast system calls and kernel modularity are enabled through binary rewriting and analysis techniques, as well as shared library substitution. HermiTux’s design principles are architecture-independent and we present a prototype on both the x86-64 and ARM aarch64 ISAs, targeting various cloud as well as edge/embedded deployments. We demonstrate HermiTux’s compatibility over a range of native C/C++/Fortran/Python Linux applications. We also show that it offers a similar degree of lightweightness compared to other unikernels, and that it performs similarly to Linux in many cases: its performance overhead averages 3\% in memory- and compute-bound scenarios, and its I/O performance is acceptable.},
	language = {en},
	urldate = {2023-10-05},
	journal = {IEEE Transactions on Computers},
	author = {Olivier, Pierre and Lefeuvre, Hugo and Chiba, Daniel and Lankes, Stefan and Min, Changwoo and Ravindran, Binoy},
	year = {2021},
	pages = {1--1},
	file = {Olivier 等 - 2021 - A Syscall-Level Binary-Compatible Unikernel.pdf:C\:\\Users\\jacky\\Zotero\\storage\\6FU7V8SB\\Olivier 等 - 2021 - A Syscall-Level Binary-Compatible Unikernel.pdf:application/pdf},
}

@article{_unikernel_2019,
	title = {Unikernel的研究及其进展},
	volume = {36},
	issn = {1001-3695},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFD&dbname=CJFDLAST2019&filename=JSYJ201906002&v=},
	doi = {10.19734/j.issn.1001-3695.2018.03.0127},
	abstract = {目前,Unikernel开源项目较多,技术呈现出复杂性和多样性,使得研究人员和开发人员难以准确理解和把握。为此,首先介绍了Unikernel的基本概念和基本特点;然后总结出了Unikernel的系统架构,并详细阐述了Unikernel关键技术的研究工作进展,包括应用层、库操作系统层和平台适配层;最后结合已有的研究成果,探讨了Unikernel的研究方向及其面临的机遇和挑战。},
	language = {中文;},
	number = {6},
	journal = {计算机应用研究},
	author = {舒, 红梅 and 谭, 良},
	year = {2019},
	note = {6 citations(CNKI)[2023-10-5]{\textless}北大核心, CSCD{\textgreater}},
	keywords = {略读, 库操作系统 Unikernel, 微服务, 云计算, cloud computing, LibOS(library operating system), micro service, Unikernel},
	pages = {1601--1608},
	file = {舒_谭_2019_Unikernel的研究及其进展.pdf:C\:\\Users\\jacky\\Zotero\\storage\\6V9XF7PQ\\舒_谭_2019_Unikernel的研究及其进展.pdf:application/pdf},
}

@phdthesis{_unikernel_2020,
	type = {硕士},
	title = {{硬件支持的Unikernel多进程隔离的设计与实现}},
	url = {https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202201&filename=1021674813.nh&v=},
	abstract = {Unikernel基于库操作系统技术,将单个应用程序与库操作系统组件编译为虚拟机镜像,可直接在KVM等虚拟化平台上运行,具有体积小、性能好、可针对化定制等优势,是一种有吸引力的针对云计算的操作系统设计。但Unikernel的一大缺点是缺乏多进程支持。最主要的原因是Unikernel是单地址空间设计,且运行在单个CPU特权级上。这大大降低了Unikernel的灵活性和适用性。多进程编程模型帮助应用程序获得安全性与性能的可扩展性。现有的大量应用程序,如Apache、Nginx、Word Press等,都利用了多进程特性,增加了迁移到Unikernel系统的难度。一些研究工作如Graphene和Kylinx等,通过使用多个Unikernel实例模拟多进程来提供多进程特性。这需要修改外部组件,与现有的云服务提供商不兼容,还对系统引入了额外的高性能开销。本文提出了Iso-Uni K,一种新的Unikernel设计,从功能性和隔离性上都为多进程特性提供了支持。Iso-Uni K在Unikernel系统已有的设计基础上,针对页表管理,资源管理,进程调度等功能进行了拓展,为Unikernel的多进程特性提供了解决方案。Iso-Uni K设计了三层权限模型,利用最新的硬件功能Intel MPK,为Unikernel中的多进程特性提供了轻量且有效的隔离性与安全性。本文主要贡献在于:·为Unikernel提供了多进程特性,更好的帮助应用程序安全地利用多核处理器的并行计算能力,获得性能可扩展性。·不需要修改虚拟机监控程序等外部组件,因此与现有的云计算平台兼容。·利用三层权限模型,最大程度地保留Unikernel不需要切换CPU特权级的优势,内核函数调用仅需要68个额外的CPU指令周期。·设计并实现了多进程API,修改编译过程,能够编译运行现有的为Linux操作系统设计的多进程应用程序。·提出了将Intel MPK应用在CPU特权模式下的设计。本文实现了基于开源系统OSv的Iso-Uni K原型系统,可以支持现有的Linux多进程应用程序。多进程应用在Iso-Uni K中的fork()操作仅需要66μs。测试表明,Iso-Uni K中的多进程特性与三层权限模型不会损害应用程序的性能,且能帮助应用程序更安全地利用多核处理器的并行计算能力获得性能的可扩展性。},
	language = {中文;},
	school = {上海交通大学},
	author = {李, 冠宇},
	collaborator = {夏, 虞斌},
	year = {2020},
	keywords = {Unikernel, 多进程, 无关, Intel MPK, Intel MPK Unikernel, Multi-process},
	file = {李_2020_硬件支持的Unikernel多进程隔离的设计与实现.pdf:C\:\\Users\\jacky\\Zotero\\storage\\FYQA32Q7\\李_2020_硬件支持的Unikernel多进程隔离的设计与实现.pdf:application/pdf},
}

@article{_stc12_2022,
	title = {{基于STC12单片机的智能指纹考勤系统设计与实现}},
	volume = {30},
	issn = {1674-6236},
	url = {https://kns.cnki.net/kcms2/article/abstract?v=NR7yonmY8oPx2kpHgOkZK-WjYjmAxfZMFAUF9kLOjhK3hqgHOmwSBu7RLmiu_3q5ezsEW83RK9ryotIRPfGgER4r-lz64APHtz7t20LR3k2Gh-91EhUJNTvR293uKi6EUGVEkob95r6foW8eOxvRmQ==&uniplatform=NZKPT&language=CHS},
	doi = {10.14022/j.issn1674-6236.2022.21.012},
	abstract = {针对传统考勤方式管理效率较低、统计工作复杂以及考勤准确性差等缺点，采用STC12C5A60S2单片机作为核心控制芯片，提出了基于单片机的智能指纹考勤系统总体设计方案，研究分析了系统的核心技术和工作流程，设计了一种基于单片机的指纹考勤系统，通过STC12单片机和指纹识别模块采集考勤信息，利用上位机实时查看考勤状态，实现了企事业单位的自动考勤和考勤数据的分析处理。实验测试结果表明，智能考勤系统具有操作简单，统计速度快，考勤准确性高等特点，能够有效防止代人打卡、签到和迟到早退等现象，节省了考勤时间，提高了管理效率，提升了企事业单位考勤管理的信息化水平，具有一定的实用推广价值。},
	language = {zh-CN},
	number = {21},
	urldate = {2024-03-09},
	journal = {电子设计工程},
	author = {牛, 怀岗 and 林, 关成 and 曹, 静},
	year = {2022},
	keywords = {串口通信, 考勤系统, 指纹识别, 智能考勤, STC12单片机},
	pages = {56--60+65},
	file = {牛 等 - 2022 - 基于STC12单片机的智能指纹考勤系统设计与实现.pdf:C\:\\Users\\jacky\\Zotero\\storage\\PDTDYY3M\\牛 等 - 2022 - 基于STC12单片机的智能指纹考勤系统设计与实现.pdf:application/pdf},
}

@article{engler_exokernel_1995,
	title = {Exokernel: {An} {Operating} {System} {Architecture} for {Application}-{Level} {Resource} {Management}},
	doi = {https://doi.org/10.1145/224056.224076},
	abstract = {Traditional operating systems limit the performance, flexibility, and functionality of applications by fixing the interface and implementation of operating system abstractions such as interprocess communication and virtual memory. The exokernel operating system architecture addresses this problem by providing application-level management of physical resources. In the exokernel architecture, a small kernel securely exports all hardware resources through a lowlevel interface to untrusted library operating systems. Library operating systems use this interface to implement system objects and policies. This separation of resource protection from management allows application-specific customization of traditional operating system abstractions by extending, specializing, or even replacing libraries.},
	language = {en},
	number = {December 1995},
	journal = {SOSP '95: Proceedings of the fifteenth ACM symposium on Operating systems principles},
	author = {Engler, Dawson R and Kaashoek, M Frans and O’Toole, James and Laboratory, M I T},
	year = {1995},
	keywords = {略读},
	pages = {251--266},
	file = {engler95exokernel.pdf:C\:\\Users\\jacky\\Zotero\\storage\\6EBXB85U\\engler95exokernel.pdf:application/pdf},
}

@article{engler_exokernel_1998,
	title = {The {Exokernel} {Operating} {System} {Architecture}},
	abstract = {On traditional operating systems only trusted software such as privileged servers or the kernel can manage resources. This thesis proposes a new approach, the exokernel architecture, which makes resource management unprivileged but safe by separating management from protection: an exokernel protects resources, while untrusted application-level software manages them. As a result, in an exokernel system, untrusted software (e.g., library operating systems) can implement abstractions such as virtual memory, ﬁle systems, and networking.},
	language = {en},
	author = {Engler, Dawson R},
	year = {1998},
	file = {Engler - 1998 - The Exokernel Operating System Architecture.pdf:C\:\\Users\\jacky\\Zotero\\storage\\23XQQZ44\\Engler - 1998 - The Exokernel Operating System Architecture.pdf:application/pdf},
}

@misc{wikiosdev_exokernel,
  author = {OSDev Wiki},
  title = {Exokernel - OSDev Wiki},
  howpublished = {\url{https://wiki.osdev.org/Exokernel}},
  note = {Accessed on April 11, 2024}
}

@article{hansen_nucleus_1970,
	title = {The nucleus of a multiprogramming system},
	volume = {13},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/362258.362278},
	doi = {10.1145/362258.362278},
	abstract = {This paper describes the philosophy and structure of a multi-programming system that can be extended with a hierarchy of operating systems to suit diverse requirements of program scheduling and resource allocation. The system nucleus simulates an environment in which program execution and input/output are handled uniformly as parallel, cooperating processes. A fundamental set of primitives allows the dynamic creation and control of a hierarchy of processes as well as the communication among them.},
	language = {en},
	number = {4},
	urldate = {2024-04-11},
	journal = {Communications of the ACM},
	author = {Hansen, Per Brinch},
	month = apr,
	year = {1970},
	pages = {238--241},
	file = {Hansen - 1970 - The nucleus of a multiprogramming system.pdf:C\:\\Users\\jacky\\Zotero\\storage\\988ZAE2H\\Hansen - 1970 - The nucleus of a multiprogramming system.pdf:application/pdf},
} 

@article{兰昊_2016_考勤系统现状综述,  
author={兰昊}, 
title={考勤系统现状综述}, 
organization={}, 
journal={城市建设理论研究（电子版）}, 
year={2016}, 
volume={}, 
number={10}, 
pages={4190-4190}, 
month={1}, 
} 
@mastersthesis{李兴春_2007_指纹考勤系统研究,  
author={李兴春}, 
title={指纹考勤系统研究}, 
school={山东科技大学}, 
year={2007}, 
type={硕士论文}, 
month={}, 
}
@misc{一种基于体征数据的考勤管理系统,
title={一种基于体征数据的考勤管理系统},
howpublished={Patent},
}

@article{李龙杰_2024_基于树莓派和声纹识别算法的课堂考勤系统,
author={李龙杰 and 张云鹏 and 王栎喜 and 邢雅琼},
title={基于树莓派和声纹识别算法的课堂考勤系统},
organization={西北大学},
journal={物联网技术},
year={2024},
volume={14},
number={2},
pages={72-75},
month={2},
}

@misc{一种基于蓝牙的无感考勤方法及系统,
title={一种基于蓝牙的无感考勤方法及系统},
howpublished={Patent},
}

@misc{rpi4-rust-workspace,
  author = {jonlamb-gh},
  title = {rpi4-rust-workspace},
  howpublished = {GitHub repository},
  year = {2020},
  url = {https://github.com/jonlamb-gh/rpi4-rust-workspace},
  note = {Accessed: April 17, 2024}
}
